operationId: newSession
summary: New Session
externalDocs:
  description: See newSession command in WebDriver specification
  url: https://w3c.github.io/webdriver/#dfn-new-sessions
parameters: []
tags:
  - Sessions
responses:
  200:
    description: Object containing sessionId and capabilities of created WebDriver session.
    content:
      application/json:
        schema:
          $ref: ../components/schemas/Capabilities.yml
requestBody:
  description: Session capabilities
  required: true
  content:
    application/json:
      schema:
        type: object
        properties:
          firstMatch:
            $ref: ../components/schemas/Capabilities.yml
          alwaysMatch:
            $ref: ../components/schemas/Capabilities.yml
description: |-
  The [New Session](https://w3c.github.io/webdriver/#dfn-new-sessions) [command](https://w3c.github.io/webdriver/#dfn-commands) creates a new WebDriver [session](https://w3c.github.io/webdriver/#dfn-sessions) with the [endpoint node](https://w3c.github.io/webdriver/#dfn-endpoint-node). If the creation fails, a [session not created](https://w3c.github.io/webdriver/#dfn-session-not-created) [error](https://w3c.github.io/webdriver/#dfn-errors) is returned.

  If the [remote end](https://w3c.github.io/webdriver/#dfn-remote-ends) is an [intermediary node](https://w3c.github.io/webdriver/#dfn-intermediary-nodes), it may use the result of the [capabilities processing](https://w3c.github.io/webdriver/#dfn-capabilities-processing) algorithm to route the [new session](https://w3c.github.io/webdriver/#dfn-new-sessions) request to the appropriate [endpoint node](https://w3c.github.io/webdriver/#dfn-endpoint-node). An [intermediary node](https://w3c.github.io/webdriver/#dfn-intermediary-nodes) is free to define [extension capabilities](https://w3c.github.io/webdriver/#dfn-extension-capability) to assist in this process, however, these specific capabilities must not be forwarded to the [endpoint node](https://w3c.github.io/webdriver/#dfn-endpoint-node).

  If the [intermediary node](https://w3c.github.io/webdriver/#dfn-intermediary-nodes) requires additional information unrelated to user agent features, it is recommended that this information be passed as top-level parameters, and not as part of the requested [capabilities](https://w3c.github.io/webdriver/#dfn-capability). An [intermediary node](https://w3c.github.io/webdriver/#dfn-intermediary-nodes) must forward custom, top-level parameters (i.e. non-[capabilities](https://w3c.github.io/webdriver/#dfn-capability)) to subsequent [remote end](https://w3c.github.io/webdriver/#dfn-remote-ends) nodes.

  > __EXAMPLE 7__
  >
  > An [intermediary node](https://w3c.github.io/webdriver/#dfn-intermediary-nodes) might require authentication on [creating a new session](https://w3c.github.io/webdriver/#dfn-new-sessions). This authentication is an argument to the [New Session](https://w3c.github.io/webdriver/#dfn-new-sessions) command itself and not the user agent’s [capabilities](https://w3c.github.io/webdriver/#dfn-capability). Therefore, the authentication should be passed as a top-level parameter and not embedded in `capabilities`:
  >
  > ```js
  > {
  >   "user": "alice",
  >    "password": "hunter2",
  >    "capabilities": {…}
  > }
  > ```
  > However, because an [intermediary node](https://w3c.github.io/webdriver/#dfn-intermediary-nodes) cannot forward [extension capabilities](https://w3c.github.io/webdriver/#dfn-extension-capability) specific to that implementation to an [endpoint node](https://w3c.github.io/webdriver/#dfn-endpoint-node), the following is also permitted by this specification:
  >
  > ```js
  > {
  >   "capabilities": {
  >     "alwaysMatch": {
  >       "cloud:user": "alice",
  >       "cloud:password": "hunter2",
  >       "platformName": "linux"
  >     },
  >     "firstMatch": [
  >       {"browserName": "chrome"},
  >       {"browserName": "edge"}
  >     ]
  >   }
  > }
  > ```
  >
  > Once all [capabilities are merged](https://w3c.github.io/webdriver/#dfn-merging-capabilities) from this example, an [endpoint node](https://w3c.github.io/webdriver/#dfn-endpoint-node) would receive [New Session](https://w3c.github.io/webdriver/#dfn-new-sessions) capabilities identical to:
  >
  > ```js
  > [
  >   {"browserName": "chrome", "platformName": "linux"},
  >   {"browserName": "edge", "platformName": "linux"}
  > ]
  > ```

  The remote end steps are:

  1. If the maximum active sessions is equal to the length of the list of active sessions, return error with error code session not created.
  1. If the remote end is an intermediary node, take implementation-defined steps that either result in returning an error with error code session not created, or in returning a success with data that is isomorphic to that returned by remote ends according to the rest of this algorithm. If an error is not returned, the intermediary node must retain a reference to the session created on the upstream node as the associated session such that commands may be forwarded to this associated session on subsequent commands.

    > NOTE
    >
    > How this is done is entirely up to the implementation, but typically the `sessionId`, and URL and URL prefix of the upstream remote end will need to be tracked.

  1. If the maximum active sessions is equal to the length of the list of active sessions, return error with error code session not created.
  1. Let _capabilities_ be the result of trying to process capabilities with _parameters_ as an argument.
  1. If _capabilities_’s is `null`, return error with error code session not created.
  1. Let _session_ id be the result of generating a UUID.
  1. Let _session_ be a new session with the session ID of session id.
  1. Set the current session to session.
  1. Append session to active sessions.
  1. Let _body_ be a JSON Object initialised with:
    * `"sessionId"`
      _session id_
    * `"capabilities"`
      _capabilities_

  1. Initialize the following from capabilities:
    1. Let _strategy_ be the result of getting property `"pageLoadStrategy"` from capabilities.
    1. If _strategy_ is a string, set the current session’s page loading strategy to strategy. Otherwise, set the page loading strategy to normal and set a property of capabilities with name `"pageLoadStrategy"` and value `"normal"`.
    1. Let _strictFileInteractability_ be the result of getting property `"strictFileInteractability"` from capabilities.
    1. If _strictFileInteractability_ is a boolean, set the current session’s strict file interactability to strictFileInteractability. Otherwise set the current session’s strict file interactability to false.
    1. Let _proxy_ be the result of getting property `"proxy"` from capabilities and run the substeps of the first matching statement:

      * __proxy is a proxy configuration object__
        Take implementation-defined steps to set the user agent proxy using the extracted proxy configuration. If the defined proxy cannot be configured return error with error code session not created.

      * __Otherwise__
        Set a property of capabilities with name `"proxy"` and a value that is a new JSON Object.

    1. If capabilities has a property with the key `"timeouts"`:
      1. Let _timeouts_ be the result of trying to JSON deserialize as a timeouts configuration the value of the `"timeouts"` property.
      1. Make the session timeouts the new timeouts.

    1. Set a property on _capabilities_ with name `"timeouts"` and value that of the JSON deserialization of the session timeouts.
    1. Apply changes to the user agent for any implementation-defined capabilities selected during the capabilities processing step.

  1. Set the webdriver-active flag to true.
  1. Set the current top-level browsing context for session in an implementation-specific way. This should be the top-level browsing context of the UA’s current browsing context.

    > NOTE
    >
    > WebDriver implementations typically start a completely new browser instance, but there is no requirement in this specification (or for WebDriver only to be used to automate only web browsers). Implementations might choose to use an existing browser instance, eg. by selecting the window that currently has focus.

  1. Set the request queue to a new queue.
  1. Return success with data _body_.
